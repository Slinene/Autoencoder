# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
#######################################################################
#from keras.layers import Input, Dense
#from keras.models import Model
#from keras.datasets import mnist
#import numpy as np 
#import matplotlib.pyplot as plt
#from keras import regularizers


## this is the size of our encoded representations
#encoding_dim = 32  # 32 floats -> compression of factor 24.5, assuming the input is 784 floats
#
## this is our input placeholder
#input_img = Input(shape=(784,))
## "encoded" is the encoded representation of the input
#encoded = Dense(encoding_dim, activation='relu',activity_regularizer=regularizers.l1
#                (0))(input_img)
## "decoded" is the lossy reconstruction of the input
#decoded = Dense(784, activation='sigmoid')(encoded)
#
## this model maps an input to its reconstruction
#autoencoder = Model(input_img, decoded)
#
#encoder=Model(input_img,encoded)
#
#encoded_input=Input(shape=(encoding_dim,))
#
#decoder_layer=autoencoder.layers[-1]
#
#decoder=Model(encoded_input,decoder_layer(encoded_input))
#
#autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')
#
###test data
#(x_train,_),(x_test,_)=mnist.load_data()
#
#x_train=x_train.astype('float32')/255
#x_test=x_test.astype('float32')/255
#x_train=x_train.reshape((len(x_train),np.prod(x_train.shape[1:])))
#x_test=x_test.reshape((len(x_test),np.prod(x_test.shape[1:])))
#print(x_train.shape)
#print(x_test.shape)
#
#autoencoder.fit(x_train,x_train,
#                epochs=50,
#                batch_size=256,
#                shuffle=True,
#                validation_data=(x_test,x_test))
#
#encoded_img=encoder.predict(x_test)
#
#decoded_img=decoder.predict(encoded_img)
#
#n=5
#plt.figure(figsize=(10,4))
#for i in range(n):
#    ax=plt.subplot(2,n,i+1)
#    plt.imshow(x_test[i].reshape(28,28))
#    plt.gray()
#    ax.get_xaxis().set_visible(False)
#    ax.get_yaxis().set_visible(False)
#    ax = plt.subplot(2, n, i + 1 + n)
#    plt.imshow(decoded_img[i].reshape(28, 28))
#    plt.gray()
#    ax.get_xaxis().set_visible(False)
#    ax.get_yaxis().set_visible(False)
#plt.show()
#
#
###########################################################################
from keras.layers import Input,Dense,Conv2D,MaxPool2D,UpSampling2D,BatchNormalization,regularizers
from keras.models import Model
from keras import optimizers
from keras import backend as K
import numpy as np
import os
from sklearn.cross_validation import train_test_split  
import matplotlib.pyplot as plt

os.environ["CUDA_VISIBLE_DEVICES"] = "0"
REGULARIZER_WEIGHT=0
input_img=Input(shape=(100,100,2))

x=Conv2D(32,(3,3), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(input_img)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

x=Conv2D(32,(3,3), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

x=Conv2D(32,(3,3), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)


x=Conv2D(32,(5,5), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
x=MaxPool2D((2,2),padding='same')(x)

x=Conv2D(16,(3,3),activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
#x=MaxPool2D((2,2),padding='same')(x)

x=Conv2D(16,(5,5),activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
#x=MaxPool2D((2,2),padding='same')(x)

x=Conv2D(8,(3,3),activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
x=Conv2D(8,(3,3),activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

x=Conv2D(8,(5,5),activation='relu',padding='same')(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

x=Conv2D(2,(2,2),activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

encoded=MaxPool2D((2,2),padding='same',name='Encoder')(x)



x = Conv2D(8, (3, 3), activation='relu', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(encoded)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
#x = UpSampling2D((2, 2))(x)
x = Conv2D(8, (5,5), activation='relu', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
x = UpSampling2D((2, 2))(x)

x = Conv2D(16, (3, 3), activation='relu', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
#x = UpSampling2D((2, 2))(x)
x = Conv2D(16, (5,5), activation='relu', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
x = Conv2D(16, (5,5), activation='relu', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)
#x = UpSampling2D((2, 2))(x)

x = Conv2D(32, (3, 3), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)


x = Conv2D(32, (5,5), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)


x = Conv2D(32, (5,5), activation='relu',padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)
x=BatchNormalization(momentum=0.99, epsilon=0.001)(x)

x = UpSampling2D((2, 2))(x)

decoded = Conv2D(2, (2, 2), activation='linear', padding='same',kernel_regularizer=regularizers.l1(REGULARIZER_WEIGHT))(x)

autoencoder = Model(input_img, decoded)


adam=optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)
sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
autoencoder.compile(optimizer=adam, loss='mean_squared_error')

#from keras.datasets import mnist

DATA_PATH='/media/pami/HuaweiProject/code/data/maincell/'

input_data=np.load(os.path.join(DATA_PATH, 'array_result_map.npy'))#augmentMaps_norm.npy
input_data=input_data[:,:,:,[3,4]]
random_split=np.random.random(len(input_data))
random_split[random_split>0.2]=1
random_split[random_split<=0.2]=0
x_train, x_test,y_train, y_test=train_test_split(input_data,input_data,test_size=0.2,random_state=0)


#x_train = input_data[random_split,:,:,:].astype('float32') 
#x_test =np.delete(input_data,random_split)


from keras.callbacks import TensorBoard
autoencoder.fit(x_train,x_train,epochs=50,batch_size=32,shuffle=True,
                validation_data=(x_test,x_test),
                callbacks=[TensorBoard(log_dir='./')])

decoded_img=autoencoder.predict(x_test)

encoder=Model(inputs=autoencoder.input,outputs=                      autoencoder.get_layer(name='Encoder').output)

encoded_img=encoder.predict(x_test) 

n=4
plt.figure(figsize=(10,4))

#ax=plt.subplot(3,1,1)
#plt.imshow(np.float32(x_test[n,:,:,0]),cmap ='gray')
#ax.get_xaxis().set_visible(False)
#ax.get_yaxis().set_visible(False)
#ax=plt.subplot(3,1,2)
#plt.imshow(np.float32(encoded_img[n,:,:,0]),cmap ='gray')
#ax.get_xaxis().set_visible(False)
#ax.get_yaxis().set_visible(False)
#ax=plt.subplot(3,1,3)
#plt.imshow(np.float32(decoded_img[n,:,:,0]),cmap ='gray')
#ax.get_xaxis().set_visible(False)
#ax.get_yaxis().set_visible(False)

ax=plt.subplot(6,2,1)
plt.imshow(np.float32(x_test[1,:,:,0]),cmap ='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax=plt.subplot(6,2,2)
plt.imshow(np.float32(x_test[1,:,:,1]),cmap ='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax = plt.subplot(6, 2, 3)
plt.imshow(np.float32(encoded_img[1,:,:,0]),cmap='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax = plt.subplot(6, 2, 4)
plt.imshow(np.float32(encoded_img[1,:,:,1]),cmap='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax = plt.subplot(6, 2, 5)
plt.imshow(np.float32(decoded_img[1,:,:,0]),cmap='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax = plt.subplot(6, 2, 6)
plt.imshow(np.float32(decoded_img[1,:,:,1]),cmap='gray')
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
plt.show()




























